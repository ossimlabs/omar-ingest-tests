/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Groovy project to get you started.
 * For more details take a look at the Groovy Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.2.1/userguide/tutorial_groovy_projects.html
 */

plugins {
    id 'com.github.johnrengelman.shadow' version '5.0.0'

    // Apply the groovy plugin to add support for Groovy
    id 'groovy'

    // Apply the application plugin to add support for building an application
    id 'application'

    id 'com.bmuschko.docker-remote-api' version '4.7.0'
    
}

repositories {
    mavenLocal()
    maven { url ossimMavenProxy }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

if(project.hasProperty("runTags"))
{
  tags = Eval.me runTags
}

dependencies {
    // https://mvnrepository.com/artifact/com.github.mkolisnyk/cucumber-runner
    compile group: 'com.github.mkolisnyk', name: 'cucumber-runner', version: '1.3.5'


    // Tomcat libraries
    compile "org.apache.tomcat.embed:tomcat-embed-core:8.5.23"
    compile "org.apache.tomcat.embed:tomcat-embed-jasper:8.5.23"
    compile "org.apache.tomcat:tomcat-jasper:8.5.23"
    compile "org.apache.tomcat:tomcat-jasper-el:8.5.23"
    compile "org.apache.tomcat:tomcat-jsp-api:8.5.23"


    // Use the latest Groovy version for building this library
    implementation 'org.codehaus.groovy:groovy-all:2.5.4'

    compile "org.codehaus.groovy:groovy:2.5.4"
    compile "commons-cli:commons-cli:+"

    compile 'info.cukes:cucumber-groovy:1.2.2'
    testCompile "info.cukes:cucumber-junit:1.2.2"
    testCompile 'junit:junit:4.11'
    compile "com.amazonaws:aws-java-sdk-sqs:1.11.26"

    compile "org.gebish:geb-core:1.0"

    compile( "org.geoscript:geoscript-groovy:1.7.0" ) {
        exclude module: 'ehcache'
        exclude module: "groovy-all"
        exclude module: "slf4j-log4j12"
        exclude module: "xml-apis"
    }

    cucumberRuntime files( "${jar.archivePath}" )
}

defaultTasks = ['shadowJar']
version = buildVersion

// Define the main class for the application
mainClassName = 'omar.cucumber.ingest.test.App'

sourceSets {
  main {
    groovy {
        srcDirs = ['src/main']
    }
  }
}

shadowJar {
  manifest {
    attributes 'Main-Class': 'omar.cucumber.ingest.test.App'
  }
  classifier = ""
}

if (!System.getProperty("cUname") && !System.getProperty("cPword"))
{
    cUname = System.getenv("CURL_USER_NAME")
    cPword = System.getenv("CURL_PASSWORD")
}

run {
    if (multi == "true")
    {
        environment 'multi', 'true'
    }

    if (runEnvironment == "local")
    {
        environment 'runEnv', 'local'
    }
}

import com.bmuschko.gradle.docker.tasks.image.Dockerfile
import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage

task createDockerfile(type: Dockerfile) {
    dependsOn build
    from 'centos:7'
    label(['maintainer': 'MAXAR'])
    runCommand('yum -y install java-1.8.0-openjdk')
    environmentVariable("CURL_USER_NAME", "${cUname}")
    environmentVariable("CURL_PASSWORD", "${cPword}")
    runCommand('useradd -u 1001 -r -g 0 --create-home -d /home/omar -s /sbin/nologin -c \'Default Application User\' omar') 
    environmentVariable("HOME","/home/omar")
    runCommand('mkdir /home/omar/src')
    runCommand('mkdir /home/omar/src/main')
    copyFile('main/', '/home/omar/src/main')
    copyFile('omar-cucumber-ingest-test-'"${version}"'.jar', '/home/omar/')
    runCommand('chown 1001:0 -R /home/omar')
    runCommand('chmod -R 777 /home/omar')
    exposePort(8080)
    user('1001')
    workingDir('/home/omar')
    defaultCommand('java', '-server', '-Xms256m', '-Xmx1024m', '-Djava.awt.headless=true', '-XX:+CMSClassUnloadingEnabled', '-XX:+UseGCOverheadLimit', '-Djava.security.egd=file:/dev/./urandom', '-jar', 'omar-cucumber-ingest-test-'"${version}"'.jar')
}

task copyFile(type: Copy) {
    dependsOn createDockerfile
    from 'src'
    from 'build/libs/omar-cucumber-ingest-test-'"${version}"'.jar'
    into 'build/docker'
}

task buildImage(type: DockerBuildImage) {
    dependsOn copyFile
    tags.add("${project.name}:latest")
}
